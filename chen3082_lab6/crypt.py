import esp32
import random
import os
import ubinascii
import machine
import hmac, uhashlib, hashlib
import json
import struct
from ucryptolib import aes
import sys
from hashlib import sha224


class CryptAes:
    """Uses AES encryption to encrypt Payload/Data before sending using MQTT protocol
    The AES algo uses Cipher Block Chaining (CBC)
    AES encryption correctly requires three things to produce ciphertext:
    a message: Payload/Data which is to be encrypted,
    a key: Piece of information (a parameter) that determines the functional output of a
        cryptographic algorithm. For encryption algorithms, a key specifies transformation
        of plaintext into ciphertext, and vice versa for decryption algorithms.
    initialization vector (IV): Piece of data sent along with the key that modifies the end
        ciphertext result. As the name suggests, it initializes the state of the encryption
        algorithm before the data enters. This protects against attacks like pattern analysis.
        This needs to be DIFFERENT for every message.
        
    Uses sessionID (received from Spinner #2) and Encrypted Data to generate HMAC for 
    authentication of the sending device (Spinner #1)
    SessionID is generated by Spinner #2 by posting to the MQTT topic, SessionID every 1 sec.
    
    HMAC (hash-based message authentication code): Type of message authentication code (MAC)
    involving a cryptographic HASH function and a secret cryptographic key. It may be used to
    simultaneously verify both the data integrity and the authentication of a message.
    
    
    """
    #-----------------------------------------------COMMON-----------------------------------------------------------#   

    def __init__(self,nodeid,iv,sessionID):
        self.nodeid = nodeid
        self.iv = iv
        self.staticiv = b"5678" * 4
        self.ivkey = b"5678" * 4
        self.datakey = b"5678" * 4
        self.passphrase = b'1234567890'
        self.sessionID = sessionID
        #print(self.sessionID)
        ## make the counter
        self.counterData = 0
        self.counterid = 0
        self.counteriv = 0
        """
        This class initializes all keys and ids
        nodeid     : unique id to identify device or board
        iv         : pseudorandom initialization vector, this needs to be DIFFERENT for every message.
        staticiv   : static initialization vector to obfuscate the randomized
                     initialization vector sent with each message, NOT used for any data
        ivkey      : unique key to encrypt the initialization vector
        datakey    : unique key to encypt the Payload/Data
        passphrase : key to generate the HMAC code for authentication
        
        sessionID  : unique value to identify the current communication session, generated only by Spinner #2
        
        ***********************NOTE******************************
        AES is a block cipher with a block size of 128 bits; that's why it encrypts 16 bytes at a time.        
        The block size of CBC mode of encryption is 16, make sure that any data going into AES
        Encryption is of size 16 bytes.
        """

    #------------------------------------SPINNER #1 Needs to Use These Functions--------------------------------------#   


    def encrypt(self, sensor_data):
        """Encrypt each of the current initialization vector (iv), the nodeid, and the sensor_data 
        using (staticiv, ivkey) for iv and (iv, datakey) for nodeid and sensor_data
        :param sensor_data  : Acceleration X, Acceleration Y, Acceleration Z, and Temperature
        """
        
        data = aes(self.datakey,2,self.iv)

        while (len(sensor_data)%16!=0):
            self.counterData+=1
            sensor_data+="0"    
        self.enData = data.encrypt(sensor_data)
        ##print("enData",self.enData)
        self.nodeid = self.nodeid+b'0000'
        
        self.nodeid = data.encrypt(bytes(self.nodeid))
        #print('nodeid',self.nodeid)
        iv   = aes(self.ivkey,2,self.staticiv)
        #print(self.iv)
        ####'utf-8' is transfer to byte string
        self.iv   = iv.encrypt(bytes(self.iv,'utf-8'))
        #print('iv',self.iv)
        
    def sign_hmac(self, sessionID):
        """Generate HMAC by using passphrase, and combination of encrypted iv, encrypted nodeid, 
        encrypted data, received sessionID.
        :param sessionID: unique value to identify the current communication session
        :return         : generated HMAC
        """
        ####sign_hmac is wrong
#         print(ubinascii.hexlify(self.sessionID))
#         print(self.iv)
#         print(self.nodeid)
#         print(self.enData)
        print(sessionID)
        #print(ubinascii.hexlify(self.sessionID))
        #temp = ubinascii.unhexlify(sessionID)
        #temp = ubinascii.hexlify(temp)
        #print(temp)
        dig = hmac.new(self.passphrase, msg=sessionID \
                       +self.iv+self.nodeid+self.enData, digestmod=hashlib.sha224).hexdigest()
        #print("pass",self.passphrase)
        #print("msg",sessionID)
        #print("iv",self.iv)
        #print("id",self.nodeid)
        #print("data",self.enData)
        #print("PIG",dig)
        return dig        
        
    def send_mqtt(self, hmac_signed):
        """Prepare the message for MQTT transfer using all of encrypted iv, encrypted nodeid, 
        encrypted data, HMAC. Create the message in JSON format.
        :param hmac_signed  : generated HMAC
        :return             : MQTT message to publish to Spinner #2 on Topic "Sensor_Data"
        """
        lib = {}
        lib["hmac"] =  hmac_signed
        #lib["what"] = "thefuck"
        lib["Data"] = ubinascii.hexlify(self.enData)
        lib["ID"] = ubinascii.hexlify(self.nodeid)
        lib["IV"] = ubinascii.hexlify(self.iv)
        # a Python object (dict):       
        #print('processed JSON'+ str(lib))
        return json.dumps(lib)
        
    #------------------------------------SPINNER #2 Needs to Use These Functions--------------------------------------#   
    
    
    def verify_hmac(self, payload):
        """Authenticates the received MQTT message. 
        Generate HMAC using passphrase, sessionID, RECEIVED encrypted iv, encrypted nodeid, encrypted data 
        and compare with received hmac inside payload to authenticate.
        :param payload  : received MQTT message from Spinner #1. This includes all encrypted data, nodeid, iv, and HMAC
        :return message : MQTT message to publish to Spinner #1 on Topic "Acknowledge", can be "Failed Authentication" 
                          if verification is unsuccessful
        """
        pass
            
    def decrypt(self, payload):
        """Decrypts the each encrypted item of the payload.
        Initialize decryption cipher for each item and and use cipher to decrypt payload items.
        :param payload  : received MQTT message from Spinner #1. This includes all encrypted data, nodeid, iv, and HMAC
        :return         : MQTT message to publish to Spinner #1 on Topic "Acknowledge", can be "Successful Decryption"
        """
        
        #### decrypt iv
        iv   = aes(self.ivkey,2,self.staticiv)
        #print(self.iv)
        self.iv   = iv.decrypt(bytes(self.iv))
        print("hello",self.iv)
        #### decrypt sensor_data
        data = aes(self.datakey,2,self.iv)
        self.enData = data.decrypt(bytes(payload))
        
        #print("enData",self.enData)
        while (self.counterData!=0):
            self.counterData-=1
            self.enData = self.enData[:-1]
        #print("enData without zero",self.enData)
        ####decrypt nodeid
        self.nodeid = data.decrypt(self.nodeid)
        #print("nodeid",self.nodeid)
        return self.enData
